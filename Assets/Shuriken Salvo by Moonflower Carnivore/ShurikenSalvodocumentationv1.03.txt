If you are reading this in PDF or TXT formats, unless you have trouble connecting to internet or accessing Google, preferably use the online version: https://docs.google.com/document/d/1zmuzt53REmgZvwT770GwPeWoIEtZhpDjt1TGlXzJyPk


Unity Asset Store Link: https://www.assetstore.unity3d.com/#!/content/52746
Email us: moonflowercarnivore@gmail.com
Facebook group: https://www.facebook.com/MoonflowerCarnivore


Shuriken Salvo is an effects library created using Unity’s default Shuriken particle system with minimal scripts and shaders. This allows straightforward usage without concern of compatibility with your own codes. This document details the suggested usage and methods of customization.


!!! IMPORTANT !!!
From Unity 5.5 onward, particle effect with “emission rate over distance” or “inherit velocity” (both used extensively by this asset) attached to a RigidBody object will not look as expected when you drag the RigidBody object. Read this article for explanation.


Unity 5.6.0f3 particle system has memory leak issue. Please update to 5.6.1f1 at least.




Change log
Basic usage of Shuriken particle system
Ending or replaying an effect
Always on top glow
Customizations
Light emitting particle
Light receiving particle
Performance and optimization
Limitations
Known issues
Particle Dissolve Shader Package
Terms of Use


Change log
* V1.00:
   * First release 
* V1.01:
   * + “Grand” version of all Elemental and Physical Missile effects.
   * + “Recovery Cure”.
   * + “Recovery Elixir”.
   * Renamed “Revive” to “Recovery Revive” for better alphabetic sorting in folder.
* V1.02:
   * + "Elemental Water" series of effects.
   * Revised “roundblade” objects in all "Elemental Wind" effects for Unity 5.3.4p4 fix of 3D rotation.
   * Improved performance of “Elemental Wind_grand” (swarm).
   * Removed “Physical Missile (Unity 5.2)” and “Physical Missile (offset pivot) because both now merge into just "Physical Missile" effects with accurate positions of missiles and trails.
   * Fixed texture icecube.png so it will no longer ask for fixing to “normal map” upon import. If this still happens to you, select “ignore”, it should remain as “texture”.
   * This update is not available to Unity 5.3.3 fallback version (only updated to v1.01) due to instability and bugs. The latest update is submitted using Unity 5.3.4p5.
* V1.03 (June 2017):
   * Update for Unity 5.6.1.
   * Fixed mesh “arch” and all particle emitters (feather, arch) using this mesh for the intended rotation result which currently rotate uncontrollably random.
   * Changed scaling mode of all particle objects to “hierarchy” due to the soon-to-be fix of Shuriken scaling bug by Unity.
   * Some particle emitters use Lights or Noise modules.




















Basic usage of Shuriken particle system
All effects are contained in the “Prefabs” folder. The root “Prefabs” contains the “swarm” version of the effects. “Single Projectile” effects are in the sub-folder. To view any of these effects, drag any prefab from the Project window to Hierarchy window and the effect will play itself when it is selected in the Hierarchy window. Before you press the “Play” button, the displayed effect is under “Simulation” (or “Preview”) mode.


You can check the little “Particle Effect” module at the bottom-right corner in the “Scene” window to manipulate the simulation, however you change its values will not affect values of the actual effect. Simulation mode is less accurate in terms of particle emission and lifetime than in the “Play” mode, this will become more obvious when the effect has complicated SubEmitter setup like this asset. You can modify the values of the particle effect loaded in the Hierarchy and press “Apply” to overwrite the one in the Project folder when you are satisfied, otherwise you should rename the parent object and drag it back to the Project folder for version backup.


Normally only the selected particle system object(s) will simulate, Shuriken particle system will check if the selected top parent and its other child objects also contain the particle system component. If so the whole effect tree will be simulated altogether without needing to re-select all particle system objects.


During the Play mode, you can still drag the effect prefab from Project window to Hierarchy window and all effects will play simultaneously. If you have changed any values of the particle effect during Play mode, it will not be applied after you stop playing it unless you drag the modified effect back to the Project window.


This package includes 2 scenes for testing purpose. The “default_scene” is for the “swarm” effects. You drag a swarm effect prefab from project folder to the “effect_container” object of hierarchy window because it defines the proper central position (the chest) of the dummy to be hit by the projectiles and trigger the collision effect. Under no circumstances should you change the position or rotation of the effect parent because this will cause confusion during implementation of the particle effect. If you really need to change the initial position or rotation of the particle effect, do that to the “effect container” instead so the effect parent is unaffected.
OK, by knowing the consequence you still want to change the initial position of the effect object, remember that changing the position of the (slave) subemitters will have no effect at all. The change of position only works on particle object when it is not any subemitter to another emitter. So only transposing the “particle master” object will show the difference.


It also includes a “single_projectile_scene” for effects in the “single projectiles” folder. You drag the combined effect (without “collision” or “projectile” suffix) to the “effect_container_radius” object and play the scene to examine the “single” effect.


Ending or replaying an effect
Before Unity 5.5, stopping simulation of the effect parent while its particles are still being animated will kill them instantly. To end the looping effect smoothly, you can deactivate the “Emission” module of the “particle master” because all other particle emitters (slave) of any “swarm” effect are dependent on the emission of this “master” object. (Doing so in Simulation mode will kill all particles as well.) The reason that the master emitter is not placed in the real top parent (which contains an empty particle system component for triggering simulation) is because there is situation that the transform-rotation of the master object should not be succeeded by the slave objects.


From Unity 5.5 and onward, ParticleSystem.Stop() stops simulation without killing the remaining particles by default which is simpler than accessing Emission module via script.










Always on top glow
All large glow and ray particle objects are put under the “TransparentFX” instead of “Default” layer. Refer to the default scene setup, you place an extra “FX camera” under the “main camera” object so the former always follows the latter. FX camera is only used to render objects of TransparentFX and this layer is removed from the culling mask of the main camera. Because the FX camera is given higher “depth” than the main camera, objects of the TransparentFX layer will always appear before those rendered by the main camera.


This practice prevents the glows from intersecting with other objects in the “lower layer”, the ground and the target particularly. The drawback is that anything rendered by the FX camera will cover absolutely everything of lower camera depth regardless of distance. You can set lower clipping plane of the FX camera or simply choose not to set up an FX camera if you do not care of the intersection. The sorting fudge and sorting layer of all particle objects are given appropriate values so they should appear in the correct order.










Customizations
Lifetime of projectiles (swarm only): Change the “start lifetime” value of “particle master” object. And then change the “duration” of all “particle slave birth (...)” objects with the exact same value as particle master’s start lifetime. This is because the gradient of “start color” and emission rate graph of all “particle slave birth” depend on the duration value. If the 2 values do not match, the trail will not appear or fade in/out at the right timing.


Launching distance and range (swarm only) is dictated by radius of circle in Shape module. Changing shape radius also require modify either start lifetime or start speed in Main module. Because changing lifetime of particle master also requires changing of its “birth” sub emitters which can be quite troublesome considering the amount of birth sub emitter linked, changing speed is more preferable. You can refer to the locateAttacker.cs script, the formula of the 3 parameters for each projectile precisely locate the attack from target is:
main.startSpeedMultiplier = shape.radius / main.startLifetimeMultiplier


Launching angle (swarm only): Most swarm effects are given certain tilt to the “particle master” or “master rotation” object of “Shuriken”. Usually you only need to adjust the Z rotation of transform. We do not rotate the parent object because there are certain cases that we do not want the child objects to be rotated such as the collider plane of “Meteorite” and “Missile” which is supposed to be constantly horizontal. If their collision plane are rotated, their collision on the supposed ground will be rotated as well which just looks silly.


Range of spiral motion (swarm only): In the “particle master”, check the “velocity over lifetime” module, the values are given the “ranges between curves”. You do not need to modify the curves but their range values, known formally in Unity API from 5.5 as “curveMultiplier”. X dictates the linear velocity and Y/Z dictates the range of spiral. Whenever you have done entering any value in the graph, press enter to confirm otherwise the value may not be registered.


One tip when editing the range of multiple axes of the particle graph is that you can select multiple curves of different axes or just press ALT+A to select all visible curves in the editor and then type the range value so the new value will be applied to all selected curves. This trick only works when all selected axes share the same range value before selection (which is mostly true for Y/Z velocity over lifetime curves). When the selected curves have different range value, the range value will disappear, preventing you from modifying it.


Length of trail: Modify the “start lifetime” of the trail object. If it is for modern desktop or console platforms, we affectionately recommend increasing the smoke trail of meteorite and missile to longer for more dramatic effect.






Density of trail: Modify the emission rate of the trail object. The default values are just right and you should not worry if the trail disperses when the projectile travels too fast, because the trail emission is calculated over “distance” instead of “time”, that means more particles are emitted to fill in the gaps when the emitter travels faster. “Distance” is not used when the emitter is stationary which is why this option is usually overlooked by artists. There are 2 situations where you do need to adjust the emission rate:
* If you have changed the trail start size, adjust the emission rate conversely.
* The flame trail object of the fire effect applies “inherit velocity”. This option is applied to give additional force for the flame particles to move along the initial direction of the leading emitter. If you set the leading emitter travels too fast, you can increase the emission rate of the flame trail to reduce the gap. But the interpolation of Shuriken particle system for evening the gaps between the initial positions of particles does not take inherit velocity into account, that means if you want the flame trail to join absolutely coherently at high speed, you need to disable the inherit velocity module besides increasing flame particles emission rate.


Collision with scene objects: All swarm effects except Shuriken (swarm) are defaulted to collide with the plane collider of particle system itself because it is cheaper and guarantees no projectile particles sneak through the collider (on the other hand, there is no way to allow the particles to pass through it while still sending collision message for triggering other particle system without script). If you want the projectiles collide with other colliders, in the “collision” module of “particle master”, you change the “Plane” to “World” mode, setup the colliders in a specific layer which you intend to be interacting with the particle effect by checking or unchecking the layers in the “collides with” parameter. If you want other particle emitter (e.g. the sub smoke trails in the Missile swarm effect) collides too, you add/enable the “collision” module of “particle slave collision birth master”.


Angle of shadow of smoke: This is applicable to any particle system using the “volumetric_smoke_alpha”, “volumetric_smoke_sheet_alpha” or “volumetric_smoke_sheet_anim_alpha”. You adjust the “start rotation” of the smoke particle objects. Zero degree means the lighter side is facing upward and shadow side downward. For some randomness of the shadow angle, change the “constant” mode of start rotation to “random between constants” and give the initial angle ±10 degree range. e.g. if the initial angle is 0 degree, change it to -10 and +10 degrees; 40 and 60 if the initial is 50.


“Volumetric_smoke_sheet_alpha_dir_light” which is used in Lightning and Meteorite effect changes the shadow angle automatically to the primary directional light in the scene via shader. If your scene has no directional light, you should change the smoke material in these effects to other smoke materials not dependent on directional light.


Brighter flame (all fire effects): change the material of flame emitter from “flame_alpha” to “flame_add” which uses additive shader. Because additive is for emissive texture, be careful that it will make the flame texture loses its definition on brighter background.


Light emitting particle
Some particle system object uses Lights module to emit light which can be projected on other light-receiving objects rendered by the same camera. This requires Lights module has an object with any qualified light component. For consistency sake, this light object is disabled which does not affect the result of the light emitting particle system. All mobile variants has this module and reference light objects removed.


Light receiving particle
The custom shader “Particle Alpha Blended Amb Dir Lit” used in the particle material uses an additional gradient map for cheap shadow effect. The gradient map automatically rotates itself according to the rotation of the main directional light. The whole material also takes the color, intensity of the directional light and ambient color into account. Their effective power can be tuned in the material setting. When using any material with this shader on any other particle system, you must enable custom vertex streams in particle system renderer module, add “UV2”, “Tangent” and “custom1.xyz”.


If your texture is a flipbook with multiple frames which requires enabling texture sheet animation module, remove “UV1” from the list “enabled UV channels”, otherwise the gradient map will not be applied on the main texture correctly.


Optionally enable the custom data module to fiddle with the additional intensity color on the whole texture which is useful in HDR bloom. It requires “color” mode, then you can change the data type from constant to gradient. If desired, you can increase the “current brightness” in the custom color picker which will grant access to HDR color mode. In desktop effects like Missile grand, we give the smoke particle system gradients from dark orange to grey then black which changes the smoke particles’ emissive color at its early age to emulate heat.
Both “emissive color” in the material properties and “custom1” color ignore alpha value (which they multiply before being added to the texture color). The resultant emissive power is determined by the grey scale of these 2 color inputs (the darker the weaker).


All mobile variants replace material with this shader by another version which uses default Mobile/Particles/Alpha Blended shader and texture with pre-painted shadow.








Performance and optimization
Unity 5.3.0 no longer batches drawcalls of particle systems which use the exact same material until 5.3.4p2, instead the engine uses multi-threading to enhance the processing speed which could mean more power is consumed. On mobile platforms this can be more sensitive as the device might heat up and lose battery power quickly. Nonetheless particle count and overdraw (2 or more objects overlap before the camera) are the biggest culprits.


Even if you are using the version which cannot batch drawcalls, we still recommend creating particle texture sheet/atlas by grouping frequently used textures of the same shader into 1 big material and then enable “Texture Sheet Animation” in the particle system to select the required texture in order to reduce the amount of texture read-write. So literally you would have at least 2 particle texture sheets, one additive and one alpha blended. You can include the less used texture into the sheet if it still has room for it. Because different games use different set of particle textures, the particle texture sheet sadly has to be done on your side for maximum optimization of the specific game.


Also you can produce another set of “power saving” particle effects by reducing the emission rate and/or lifetime of all particle effects. Exactly how much should be reduced really depends on how you value aesthetics. There is hardly a right answer. Some might just remove the seemingly minor SubEmitters (but be careful if it is a master emitter to another subemitter, in such case, only uncheck its “renderer” module unless its slave emitter is not needed either) instead of reducing other emitters’ emission rate or lifetime. The laziest and safest approach would be reducing all lifetime values by half, but remember that the “duration” of any trail SubEmitter should agree with the lifetime of the leading (master) emitter, otherwise the color cycle of the trail will not be properly played.
























Limitations
* This is not homing missile in any sense. It does not take the attacker's position into account, although you can adjust the "launching distance" in the particle system easily.
* If the target moves, the already launched projectiles will miss the target even if you parent the particle effect under your target.
* The head of the projectile/missile must be billboard instead of mesh unless it is omni-directional. Auto-reoriented mesh particle like stretched billboard is not yet supported by Shuriken particle system but you can vote on this feature.








Known issues
* For “single projectile” effects, another new particle system feature of Unity 5.3 allows triggering “collision” effect by the subemitter collision setting in “projectile” effect without additional script. In the older versions, this can only be done reliably via scripting. For this reason, we have included both the “projectile” and “collision” prefabs separately so you can even mix and match by yourself. For Unity 5.0~5.2 customers, please download this asset once again when you switch to Unity 5.3.1 onward (you should not need to pay again with the same account which has purchased this asset), because the combined “single projectile” prefabs are removed from the 5.2 package to avoid confusion.




























Particle Dissolve Shader Package
If you have bought both Shuriken Salvo and Particle Dissolve Shader Package, you can use the “explosion dissolve sharp/soft alpha” material in place of “explosion_alpha” material in the “Elemental Fire_grand” effects (both swarm and single versions). You simply change the material of “particle slave collision birth explosion”. Most particle values can remain intact, but it is still recommended to adjust the “color over lifetime” for slightly better dispersing animation.
* “Explosion_alpha”:
  

* “Explosion dissolve sharp/soft alpha”:
  







































Terms of Use
Disclaimer: This section only summerizes a portion of Unity’s Asset Store Terms of Service and End User License Agreement (EULA). It does not override the agreement detailed on Unity’s website if there is contradiction between the two.


This asset published by Moonflower Carnivore (the licensor) is intended to be only distributed publicly in your (the end user’s) electronic game and interactive media, in the form of an executable which cannot be modified in any editor again, including but not limited to Unity editor.


You are free to use and modify this asset if you obtain this asset legally via Unity Asset Store firsthand and distribute your executable containing this asset legally.


You are not allowed to publicly reproduce, distribute, sublicense, rent, lease or lend this asset, either untouched or retouched, or any resource included in this asset for commercial or non-commercial purposes.


If you obtain this asset secondhand, not via Unity Asset Store firsthand, you are not authorized to use this asset, unless you obtain this asset legally via Unity Asset Store.


Per EULA, sharing this asset to other computers is only allowed: 
(...) provided that these computers are either all (i) physically located at a single physical location ("Site") belonging to END-USER, or (ii) laptops belonging to END-USER which have been made available by END-USER to its employees that are employed at the same Site provided all such computers have appropriately licensed Unity software installed. 


If you really want to include any single content of our assets in your own asset to be sold commercially, you must email us to negotiate a separate contract for permission.








If you like this asset, please rate it or leave your comment in our Asset Store item page. However, if you need technical support, you should email us directly. You may also be interested in other assets created by us, so check out our publisher page on Asset Store. Some assets are even offered for free, so don’t delay.




  

Moonflower Carnivore
2015-2016


moonflowercarnivore@gmail.com